name: Node.js App Deploy to EKS
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.24.0' # version par d√©faut
        id: install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR Public
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get ECR Repository URI
        id: ecr-repo-uri
        run: |
          echo "::set-output name=uri::$(aws ecr-public describe-repositories --repository-names devops/john --query 'repositories[0].repositoryUri' --output text)"
          
      - name: Delete Previous Docker Image from ECR
        run: |
          aws ecr batch-check-layer-availability --repository-name devops/john --image-digests $(aws ecr list-images --repository-name devops/john --query 'imageDetails[*].imageDigest' --output json) --output table | grep devops/john | awk '{print $1}' | xargs -I {} aws ecr-public batch-delete-image --repository-name devops/john --image-ids imageDigest={}
      
      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ steps.ecr-repo-uri.outputs.uri }}
          IMAGE_TAG: 1.1
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          
      - name: Update kube config
        run: aws eks update-kubeconfig --name john

      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
